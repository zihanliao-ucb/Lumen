#version 430

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
layout (binding = 0, rgba32f) uniform image3D sdfTexture;
layout (binding = 1, rgba32f) uniform image3D normalTexture;

uniform vec3 uBoundingBoxOrigin;
uniform float uVoxelSize;
uniform int uSdfSize;

vec4 readSDF(ivec3 coord) {
    if (any(lessThan(coord, ivec3(0))) || any(greaterThanEqual(coord, ivec3(uSdfSize))))
        return vec4(100.0); // large value if out of bounds
    return imageLoad(sdfTexture, coord);
}

vec4 readNormal(ivec3 coord) {
    if (any(lessThan(coord, ivec3(0))) || any(greaterThanEqual(coord, ivec3(uSdfSize))))
        return vec4(0.0); // zero normal if out of bounds
    return imageLoad(normalTexture, coord);
}

void main() {
    ivec3 coord = ivec3(gl_GlobalInvocationID);
    vec3 p_grid = (vec3(coord) + 0.5) * uVoxelSize + uBoundingBoxOrigin;

    const int maxJump = uSdfSize / 16;

    for (int jump = maxJump; jump >= 1; jump /= 2) {
        // Read the current SDF value
        vec4 currentSDF = readSDF(coord);
        vec3 minPoint = currentSDF.xyz;
        float minDist = abs(currentSDF.a);
        vec4 minNormal = readNormal(coord);

        for (int dz = -1; dz <= 1; dz++) {
            for (int dy = -1; dy <= 1; dy++) {
                for (int dx = -1; dx <= 1; dx++) {
                    if (dx == 0 && dy == 0 && dz == 0) continue; // skip the current voxel
                    ivec3 offset = ivec3(dx, dy, dz) * jump;
                    ivec3 neighbor = coord + offset;
                    vec4 neighborSDF = readSDF(neighbor);
                    float d = length(p_grid - neighborSDF.xyz);
                    // float d = length(vec3(offset)) * uVoxelSize + neighborSDF.a;
                    if (d < minDist) {
                        minPoint = neighborSDF.xyz;
                        minDist = d;
                        minNormal = readNormal(neighbor);
                    }
                }
            }
        }
        // if dot product is negative, we are inside the surface
        if (dot(minNormal.xyz, p_grid - minPoint) < 0.0) {
            minDist = -minDist;
        }
        imageStore(sdfTexture, coord, vec4(minPoint, minDist));
        imageStore(normalTexture, coord, minNormal);
    }

}
