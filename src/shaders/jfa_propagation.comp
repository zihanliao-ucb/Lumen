#version 430

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
layout (binding = 0, r32f) buffer sdfArray{
    float sdf;
}
layout (binding = 1, rgb32f) buffer normalArray{
    float normal;
}
layout (binding = 1, rgb32f) buffer seedArray{
    float seed;
}

uniform float uVoxelLength;
uniform ivec3 uSdfSize;

float readSDF(ivec3 coord) {
    if (any(lessThan(coord, ivec3(0))) || any(greaterThanEqual(coord, uSdfSize)))
        return 100.0; // large value if out of bounds
    return sdf[coord.x + coord.y * uSdfSize.x + coord.z * uSdfSize.x * uSdfSize.y];
}

vec3 readNormal(ivec3 coord) {
    if (any(lessThan(coord, ivec3(0))) || any(greaterThanEqual(coord, uSdfSize)))
        return vec3(0.0); // zero normal if out of bounds
    int index = coord.x + coord.y * uSdfSize.x + coord.z * uSdfSize.x * uSdfSize.y;
    return vec3(normal[index * 3], normal[index * 3 + 1], normal[index * 3 + 2]);
}

vec3 readSeed(ivec3 coord) {
    if (any(lessThan(coord, ivec3(0))) || any(greaterThanEqual(coord, uSdfSize)))
        return vec3(-1.0); // nagative seed if out of bounds
    int index = coord.x + coord.y * uSdfSize.x + coord.z * uSdfSize.x * uSdfSize.y;
    return vec3(seed[index * 3], seed[index * 3 + 1], seed[index * 3 + 2]);
}

void writeSDF(ivec3 coord, float value) {
    if (any(lessThan(coord, ivec3(0))) || any(greaterThanEqual(coord, uSdfSize)))
        return; // do nothing if out of bounds
    sdf[coord.x + coord.y * uSdfSize.x + coord.z * uSdfSize.x * uSdfSize.y] = value;
}

void writeNormal(ivec3 coord, vec3 value) {
    if (any(lessThan(coord, ivec3(0))) || any(greaterThanEqual(coord, uSdfSize)))
        return; // do nothing if out of bounds
    int index = coord.x + coord.y * uSdfSize.x + coord.z * uSdfSize.x * uSdfSize.y;
    normal[index * 3] = value.x;
    normal[index * 3 + 1] = value.y;
    normal[index * 3 + 2] = value.z;
}

void writeSeed(ivec3 coord, vec3 value) {
    if (any(lessThan(coord, ivec3(0))) || any(greaterThanEqual(coord, uSdfSize)))
        return; // do nothing if out of bounds
    int index = coord.x + coord.y * uSdfSize.x + coord.z * uSdfSize.x * uSdfSize.y;
    seed[index * 3] = value.x;
    seed[index * 3 + 1] = value.y;
    seed[index * 3 + 2] = value.z;
}

void main() {
    ivec3 coord = ivec3(gl_GlobalInvocationID);
    if (any(lessThan(coord, ivec3(0))) || any(greaterThanEqual(coord, uSdfSize)))
        return; // do nothing if out of bounds

    vec3 p_grid = (vec3(coord) + 0.5) * uVoxelLength;

    const int maxJump = max(uSdfSize.x, max(uSdfSize.y, uSdfSize.z));

    for (int jump = maxJump; jump >= 1; jump /= 2) {
        // Read the current SDF value
        float minDist = abs(readSDF(coord));
        vec3 minNormal = readNormal(coord);
        vec3 minSeed = readSeed(coord);
        
        for (int dz = -1; dz <= 1; dz++) {
            for (int dy = -1; dy <= 1; dy++) {
                for (int dx = -1; dx <= 1; dx++) {
                    if (dx == 0 && dy == 0 && dz == 0) continue; // skip the current voxel
                    ivec3 offset = ivec3(dx, dy, dz) * jump;
                    ivec3 neighbor = coord + offset;
                    float neighborSDF = readSDF(neighbor);
                    vec3 neighborNormal = readNormal(neighbor);
                    vec3 neighborSeed = readSeed(neighbor);
                    float d = length(neighborSeed - p_grid);
                    if (d < minDist) {
                        minSeed = neighborSeed;
                        minDist = d;
                        minNormal = neighborNormal;
                    }
                }
            }
        }
        // if dot product is negative, we are inside the surface
        if (dot(minNormal, p_grid - minPoint) < 0.0) {
            minDist = -minDist;
        }
        writeSDF(coord, minDist);
        writeNormal(coord, minNormal);
        writeSeed(coord, minSeed);
    }

}
